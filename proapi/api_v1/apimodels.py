"""
Definition for classes used to represent models generated by Swagger.
"""
class Error:

    def __init__(self):
        self.code = 200
        self.message = "OK"

    def __str__(self):
        return self.code+ " : " +self.message


class Evidence:

    def __init__(self):
        self.evidenceSource = []
        self.evidenceCode = ""

    def add_evidenceSource(self, evidenceSource):
        self.evidenceSource.append(evidenceSource)

    def __str__(self):
        return self.evidenceSource+ " : "+self.evidenceCode


class SearchParameter:

    def __init__(self):
        self.searchField = "AllFields"
        self.searchValue = ""
        self.showAltID = True
        self.showPROName = True
        self.showPRONamespace = True
        self.showPROTermDefinition = True
        self.showCategory = True
        self.showParent = True
        self.showAncestor = False
        self.showAnnotation = False
        self.showAnyRelationship = False
        self.showChild = False
        self.showDescendant = False
        self.showComment = False
        self.showEcoCycID = False
        self.showGeneName = False
        self.showHGNCID = False
        self.showMGIID = False
        self.showOrthoIsoform = False
        self.showOrthoModform = False
        self.showPANTHERID = False
        self.showPIRSFID = False
        self.showPMID = False
        self.showReactomeID = False
        self.showSynonym = False
        self.showTaxonID = False
        self.showUniProtKBID = False
        self.offset = "0"
        self.limit = "50"

    def __str__(self):
        return "searchField: "+self.searchField+"\nsearchValue: " + self.searchValue+\
               "\nshowPROName: " + str(self.showPROName) + "\nshowPROTermDefinition: "+ str(self.showPROTermDefinition)+\
               "\nshowCategory: "+ str(self.showCategory) + "\nshowParent: "+str(self.showParent) + \
               "\nshowAncestor: " + str(self.showAncestor) + "\nshowAnnotation: " + str(self.showAnnotation) + \
                "\nshowAnyRelationship: " + str(self.showAnyRelationship) + "\nshowChild: " + str(self.showChild)


class Annotation:

    def __init__(self):
        self.modifier = ""
        self.relation = ""
        self.ontologyID = ""
        self.ontologyTerm = ""
        self.relativeTo = ""
        self.interactionWith = ""
        self.evidence = None
        self.ncbiTaxonId = ""
        self.inferredFrom = []

# class PAF:
#
#     def __init__(self):
#         self.proID = ""
#         self.objectTerm = ""
#         self.objectSyny = ""
#         self.modifier = ""
#         self.relation = ""
#         self.ontologyID = ""
#         self.ontologyTerm = ""
#         self.relativeTo = ""
#         self.interactionWith = ""
#         self.evidenceSource = ""
#         self.evidenceCode = ""
#         self.taxon = ""
#         self.inferredFrom = ""
#         self.dbID = ""
#         self.date = ""
#         self.assignedBy = ""
#         self.comment = ""

class Parent:

    def __init__(self):
        self.pro = ""
        self.parent = ""

class Ancestor:

    def __init__(self):
        self.pro = ""
        self.ancestor = ""

class Children:

    def __init__(self):
        self.pro = ""
        self.children = ""

class Decendant:

    def __init__(self):
        self.pro = ""
        self.decendant = ""

class PAF:

    def __init__(self):
        self.PRO_ID = ""
        self.Object_term = ""
        self.Object_syny = ""
        self.Modifier = ""
        self.Relation = ""
        self.Ontology_ID = ""
        self.Ontology_term = ""
        self.Relative_to = ""
        self.Interaction_with = ""
        self.Evidence_source = ""
        self.Evidence_code = ""
        self.Taxon = ""
        self.Inferred_from = ""
        self.DB_ID = ""
        self.Date = ""
        self.Assigned_by = ""
        self.Comment = ""

class PROTerm:

    def __init__(self):
        self.id = ""
        self.alt_id = ""
        self.name = ""
        self.namespace = ""
        self.termDef = ""
        self.category = ""
        self.anyRelationship = ""
        self.annotation = []
        self.child = []
        self.descendant = []
        self.comment = ""
        self.ecoCycID = ""
        self.geneName = ""
        self.hgncID = []
        self.mgiID = []
        self.orthoIsoform = []
        self.orthoModform = []
        self.pantherID = ""
        self.parent = []
        self.ancestor = []
        self.pirsfID = ""
        self.pmID = []
        self.reactomeID = []
        self.synonym = []
        self.taxonID = "";
        self.uniprotKBID = []

    def __str__(self):
        return "alt_id: "+self.alt_id
